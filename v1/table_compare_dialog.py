from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QTableWidget, 
                           QTableWidgetItem, QLabel, QComboBox, QListWidget, QListWidgetItem,
                           QSplitter, QMessageBox, QCheckBox, QStyledItemDelegate, QWidget,
                           QMenu, QAction, QFileDialog)
from PyQt5.QtCore import Qt, QSettings
from PyQt5.QtGui import QColor, QBrush, QPen, QFont, QPainter, QIcon
from PyQt5.QtWidgets import QApplication, QDesktopWidget
import sqlite3
import pandas as pd


class ComparisonItemDelegate(QStyledItemDelegate):
    """–î–µ–ª–µ–≥–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —è—á–µ–µ–∫ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    
    def paint(self, painter, option, index):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–∞–∑–ª–∏—á–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —è—á–µ–π–∫–∏
        diff_type = index.data(Qt.UserRole)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
        painter.save()
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        if diff_type == "different":
            # –°–∏–Ω—è—è —Ä–∞–º–∫–∞ - –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è
            painter.fillRect(option.rect, QBrush(QColor(238, 238, 255)))
        elif diff_type == "only_a":
            # –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ - –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ A
            painter.fillRect(option.rect, QBrush(QColor(255, 238, 238)))
        elif diff_type == "only_b":
            # –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ - –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ B
            painter.fillRect(option.rect, QBrush(QColor(238, 255, 238)))
        else:
            # –û–±—ã—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
            painter.fillRect(option.rect, option.palette.base())
        
        # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞
        if diff_type == "different":
            pen = QPen(QColor(0, 0, 255))
            pen.setWidth(2)
            painter.setPen(pen)
            painter.drawRect(option.rect.adjusted(1, 1, -1, -1))
        elif diff_type == "only_a":
            pen = QPen(QColor(255, 0, 0))
            pen.setWidth(2)
            painter.setPen(pen)
            painter.drawRect(option.rect.adjusted(1, 1, -1, -1))
        elif diff_type == "only_b":
            pen = QPen(QColor(0, 128, 0))
            pen.setWidth(2)
            painter.setPen(pen)
            painter.drawRect(option.rect.adjusted(1, 1, -1, -1))
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        painter.restore()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–ª–∏—á–∏—è
        if diff_type == "different":
            option.palette.setColor(option.palette.Text, QColor(0, 0, 204))
        elif diff_type == "only_a":
            option.palette.setColor(option.palette.Text, QColor(204, 0, 0))
        elif diff_type == "only_b":
            option.palette.setColor(option.palette.Text, QColor(0, 136, 0))
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        super().paint(painter, option, index)

class TableCompareDialog(QWidget):
    def __init__(self, sqlite_conn, table_a_name, table_b_name, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: {table_a_name} –∏ {table_b_name}')
        self.setWindowIcon(QIcon('icons/main.png'))
        self.resize(1000, 700)
        self.sqlite_conn = sqlite_conn
        self.table_a_name = table_a_name
        self.table_b_name = table_b_name
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        self.table_a_data = None
        self.table_b_data = None
        self.table_a_columns = []
        self.table_b_columns = []
        self.key_columns_a = []
        self.key_columns_b = []
        self.merged_data = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ–∫–Ω–∞
        self._settings = QSettings('csvQuery', f'TableCompareDialog')
        
        # –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.hide_unchanged_rows = False
        self.hide_empty_rows = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self._init_ui()
        self._load_table_data()
        self.restore_geometry()
    
    def closeEvent(self, event):
        self.save_geometry()
        super().closeEvent(event)
    
    def save_geometry(self):
        self._settings.setValue('geometry', self.saveGeometry())
    
    def restore_geometry(self):
        geom = self._settings.value('geometry')
        if geom:
            self.restoreGeometry(geom)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –≤–∏–¥–∏–º–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            desktop = QApplication.desktop()
            screen_rect = desktop.availableGeometry()
            window_rect = self.geometry()
            
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ
            if (window_rect.right() < screen_rect.left() or 
                window_rect.left() > screen_rect.right() or
                window_rect.bottom() < screen_rect.top() or
                window_rect.top() > screen_rect.bottom()):
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                self.move(screen_rect.center() - self.rect().center())
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            desktop = QApplication.desktop()
            screen_rect = desktop.availableGeometry()
            self.move(screen_rect.center() - self.rect().center())
    
    def _init_ui(self):
        layout = QVBoxLayout(self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        self.toggle_panel_btn = QPushButton('‚ñ≤')
        self.toggle_panel_btn.setToolTip('–°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫')
        self.toggle_panel_btn.setFixedSize(24, 24)
        self.toggle_panel_btn.clicked.connect(self.toggle_top_panel)
        header_layout.addWidget(self.toggle_panel_btn)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout.addWidget(QLabel(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: {self.table_a_name} –∏ {self.table_b_name}'))
        header_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.maximize_btn = QPushButton('üóñ')
        self.maximize_btn.setToolTip('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
        self.maximize_btn.setFixedSize(24, 24)
        self.maximize_btn.clicked.connect(self.toggle_maximize)
        header_layout.addWidget(self.maximize_btn)
        
        layout.addLayout(header_layout)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        self.top_panel_widget = QWidget()
        top_panel_layout = QVBoxLayout(self.top_panel_widget)
        top_panel_layout.setContentsMargins(0, 0, 0, 0)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–±–æ—Ä–æ–º –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        top_panel = QHBoxLayout()
        
        # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã A
        table_a_panel = QVBoxLayout()
        table_a_panel.addWidget(QLabel(f'–ö–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {self.table_a_name}:'))
        self.columns_a_list = QListWidget()
        self.columns_a_list.setSelectionMode(QListWidget.MultiSelection)
        table_a_panel.addWidget(self.columns_a_list)
        top_panel.addLayout(table_a_panel)
        
        # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã B
        table_b_panel = QVBoxLayout()
        table_b_panel.addWidget(QLabel(f'–ö–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {self.table_b_name}:'))
        self.columns_b_list = QListWidget()
        self.columns_b_list.setSelectionMode(QListWidget.MultiSelection)
        table_b_panel.addWidget(self.columns_b_list)
        top_panel.addLayout(table_b_panel)
        
        top_panel_layout.addLayout(top_panel)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        layout.addWidget(self.top_panel_widget)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.splitter = QSplitter(Qt.Vertical)
        self.splitter.setHandleWidth(8)  # –î–µ–ª–∞–µ–º —Ä—É—á–∫—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —à–∏—Ä–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        button_widget = QWidget()
        button_layout = QHBoxLayout(button_widget)
        button_layout.setContentsMargins(0, 0, 0, 0)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        compare_btn = QPushButton('–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã')
        compare_btn.clicked.connect(self.compare_tables)
        button_layout.addWidget(compare_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.splitter.addWidget(button_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        table_widget = QWidget()
        table_layout = QVBoxLayout(table_widget)
        table_layout.setContentsMargins(0, 0, 0, 0)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.result_table = QTableWidget()
        self.result_table.setItemDelegate(ComparisonItemDelegate())
        self.result_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.result_table.customContextMenuRequested.connect(self.show_context_menu)
        table_layout.addWidget(self.result_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.splitter.addWidget(table_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        self.splitter.setSizes([100, 900])  # 10% –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏, 90% –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        layout.addWidget(self.splitter)
        
        self.setLayout(layout)
    
    def _load_table_data(self):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã A
            query_a = f"""SELECT * FROM '{self.table_a_name}'"""
            self.table_a_data = pd.read_sql_query(query_a, self.sqlite_conn)
            self.table_a_columns = list(self.table_a_data.columns)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã B
            query_b = f"""SELECT * FROM '{self.table_b_name}'"""
            self.table_b_data = pd.read_sql_query(query_b, self.sqlite_conn)
            self.table_b_columns = list(self.table_b_data.columns)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
            self.columns_a_list.clear()
            for col in self.table_a_columns:
                self.columns_a_list.addItem(col)
            
            self.columns_b_list.clear()
            for col in self.table_b_columns:
                self.columns_b_list.addItem(col)
                
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü: {str(e)}')
    
    def compare_tables(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        self.key_columns_a = [item.text() for item in self.columns_a_list.selectedItems()]
        self.key_columns_b = [item.text() for item in self.columns_b_list.selectedItems()]
        
        if not self.key_columns_a or not self.key_columns_b:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü')
            return
        
        if len(self.key_columns_a) != len(self.key_columns_b):
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å')
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
            df_a = self.table_a_data.copy()
            df_b = self.table_b_data.copy()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            df_a.columns = [f'A_{col}' for col in df_a.columns]
            df_b.columns = [f'B_{col}' for col in df_b.columns]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            df_a['merge_key'] = df_a.apply(lambda row: '_'.join([str(row[f'A_{col}']) for col in self.key_columns_a]), axis=1)
            df_b['merge_key'] = df_b.apply(lambda row: '_'.join([str(row[f'B_{col}']) for col in self.key_columns_b]), axis=1)
            
            # –ü–æ–ª–Ω–æ–µ –≤–Ω–µ—à–Ω–µ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.merged_data = pd.merge(df_a, df_b, on='merge_key', how='outer')
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self._display_comparison_results()
            
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {str(e)}')
    
    def toggle_top_panel(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –≤—ã–±–æ—Ä–æ–º –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        if self.top_panel_widget.isVisible():
            self.top_panel_widget.hide()
            self.toggle_panel_btn.setText('‚ñº')
            self.toggle_panel_btn.setToolTip('–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫')
        else:
            self.top_panel_widget.show()
            self.toggle_panel_btn.setText('‚ñ≤')
            self.toggle_panel_btn.setToolTip('–°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫')
    
    def toggle_maximize(self):
        """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–∂–Ω–∏–π —Ä–∞–∑–º–µ—Ä"""
        if self.isMaximized():
            self.showNormal()
            self.maximize_btn.setText('üóñ')
            self.maximize_btn.setToolTip('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å')
        else:
            self.showMaximized()
            self.maximize_btn.setText('üóó')
            self.maximize_btn.setToolTip('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
    
    def show_context_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        menu = QMenu()
        
        # –ü–æ–¥–º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫
        rows_menu = menu.addMenu('–°—Ç—Ä–æ–∫–∏')
        
        # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        hide_unchanged_action = QAction('–°–∫—Ä—ã—Ç—å —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' if not self.hide_unchanged_rows else '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', self)
        hide_unchanged_action.triggered.connect(self.toggle_unchanged_rows)
        rows_menu.addAction(hide_unchanged_action)
        
        # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        hide_empty_action = QAction('–°–∫—Ä—ã—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏' if not self.hide_empty_rows else '–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏', self)
        hide_empty_action.triggered.connect(self.toggle_empty_rows)
        rows_menu.addAction(hide_empty_action)
        
        # –ü–æ–¥–º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–æ–ª–æ–Ω–æ–∫
        columns_menu = menu.addMenu('–ö–æ–ª–æ–Ω–∫–∏')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
        show_all_columns = QAction('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏', self)
        show_all_columns.triggered.connect(lambda: self.toggle_all_columns_visibility(True))
        columns_menu.addAction(show_all_columns)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
        hide_all_columns = QAction('–°–∫—Ä—ã—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏', self)
        hide_all_columns.triggered.connect(lambda: self.toggle_all_columns_visibility(False))
        columns_menu.addAction(hide_all_columns)
        
        columns_menu.addSeparator()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
        for col_idx in range(self.result_table.columnCount()):
            col_name = self.result_table.horizontalHeaderItem(col_idx).text()
            is_visible = not self.result_table.isColumnHidden(col_idx)
            
            column_action = QAction(col_name, self)
            column_action.setCheckable(True)
            column_action.setChecked(is_visible)
            column_action.triggered.connect(lambda checked, idx=col_idx: self.toggle_column_visibility(idx, checked))
            columns_menu.addAction(column_action)
        
        # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        export_menu = menu.addMenu('–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
        export_csv = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV', self)
        export_csv.triggered.connect(lambda: self.export_results('csv'))
        export_menu.addAction(export_csv)
        
        export_excel = QAction('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel', self)
        export_excel.triggered.connect(lambda: self.export_results('excel'))
        export_menu.addAction(export_excel)
        
        menu.exec_(self.result_table.mapToGlobal(position))
    
    def toggle_unchanged_rows(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.hide_unchanged_rows = not self.hide_unchanged_rows
        self._display_comparison_results()
        
    def toggle_empty_rows(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏"""
        self.hide_empty_rows = not self.hide_empty_rows
        self._display_comparison_results()
        
    def toggle_column_visibility(self, column_index, visible):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É"""
        self.result_table.setColumnHidden(column_index, not visible)
        
    def toggle_all_columns_visibility(self, visible):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏"""
        for col_idx in range(self.result_table.columnCount()):
            self.result_table.setColumnHidden(col_idx, not visible)
    
    def export_results(self, format_type):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ CSV –∏–ª–∏ Excel"""
        if self.merged_data is None:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_filter = 'CSV —Ñ–∞–π–ª—ã (*.csv)' if format_type == 'csv' else 'Excel —Ñ–∞–π–ª—ã (*.xlsx)'
        file_ext = '.csv' if format_type == 'csv' else '.xlsx'
        file_path, _ = QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 
                                               f'comparison_{self.table_a_name}_{self.table_b_name}{file_ext}',
                                               file_filter)
        
        if not file_path:
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = self.merged_data.copy()
            
            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'merge_key' in export_data.columns:
                export_data = export_data.drop('merge_key', axis=1)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if format_type == 'csv':
                export_data.to_csv(file_path, index=False, encoding='utf-8-sig')
            else:
                export_data.to_excel(file_path, index=False)
            
            QMessageBox.information(self, '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}')
        
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}')
    
    def _display_comparison_results(self):
        if self.merged_data is None:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ A_ –∏ B_)
        all_columns = set()
        for col in self.table_a_columns:
            all_columns.add(col)
        for col in self.table_b_columns:
            all_columns.add(col)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        column_visibility = {}
        for col_idx in range(self.result_table.columnCount()):
            if col_idx < self.result_table.horizontalHeader().count():
                col_name = self.result_table.horizontalHeaderItem(col_idx).text()
                column_visibility[col_name] = not self.result_table.isColumnHidden(col_idx)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_table.clear()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        rows_to_display = []
        for idx, row in enumerate(self.merged_data.itertuples()):
            has_difference = False
            has_non_empty_values = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å—Ç—Ä–æ–∫–µ –∏ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for col_name in all_columns:
                a_col = f'A_{col_name}'
                b_col = f'B_{col_name}'
                
                a_value = getattr(row, a_col) if hasattr(row, a_col) and not pd.isna(getattr(row, a_col)) else None
                b_value = getattr(row, b_col) if hasattr(row, b_col) and not pd.isna(getattr(row, b_col)) else None
                
                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –æ—Ç–º–µ—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∞—â—É—é –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if a_value is not None or b_value is not None:
                    has_non_empty_values = True
                
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ –∏–ª–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏–µ
                if a_value != b_value or (a_value is None) != (b_value is None):
                    has_difference = True
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:
            # 1. –ï—Å–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            # 2. –ï—Å–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
            show_row = True
            
            if self.hide_empty_rows and not has_non_empty_values:
                show_row = False
            
            if self.hide_unchanged_rows and not has_difference:
                show_row = False
            
            if show_row:
                rows_to_display.append(idx)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫
        self.result_table.setRowCount(len(rows_to_display))
        self.result_table.setColumnCount(len(all_columns))
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.result_table.setHorizontalHeaderLabels(list(all_columns))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞–∑–ª–∏—á–∏–π
        red_style = "QTableWidgetItem { border: 2px solid red; background-color: #ffeeee; color: #cc0000; }"
        green_style = "QTableWidgetItem { border: 2px solid green; background-color: #eeffee; color: #008800; }"
        blue_style = "QTableWidgetItem { border: 2px solid blue; background-color: #eeeeff; color: #0000cc; }"
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏
        for display_idx, row_idx in enumerate(rows_to_display):
            row = self.merged_data.iloc[row_idx]
            
            for col_idx, col_name in enumerate(all_columns):
                a_col = f'A_{col_name}'
                b_col = f'B_{col_name}'
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏
                item = QTableWidgetItem()
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
                a_value = row[a_col] if a_col in row.index and not pd.isna(row[a_col]) else None
                b_value = row[b_col] if b_col in row.index and not pd.isna(row[b_col]) else None
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ç–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if a_value is not None and b_value is not None:
                    # –ï—Å—Ç—å –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    if str(a_value) == str(b_value):
                        # –ó–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã
                        item.setText(str(a_value))
                    else:
                        # –ó–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è - —Å–∏–Ω—è—è —Ä–∞–º–∫–∞
                        item.setText(f'{a_value} | {b_value}')
                        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                        if hasattr(self.parent(), 'dark_theme') and self.parent().dark_theme:
                            item.setBackground(QColor(40, 40, 80))   # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                            item.setForeground(QColor(120, 120, 255)) # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                        else:
                            item.setBackground(QColor(238, 238, 255)) # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                            item.setForeground(QColor(0, 0, 204))     # –°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                        item.setData(Qt.UserRole, "different")
                        item.setToolTip(f"–¢–∞–±–ª–∏—Ü–∞ A: {a_value}\n–¢–∞–±–ª–∏—Ü–∞ B: {b_value}")
                elif a_value is not None:
                    # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ A - –∫—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞
                    item.setText(str(a_value))
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                    if hasattr(self.parent(), 'dark_theme') and self.parent().dark_theme:
                        item.setBackground(QColor(80, 40, 40))    # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                        item.setForeground(QColor(255, 120, 120)) # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                    else:
                        item.setBackground(QColor(255, 238, 238)) # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                        item.setForeground(QColor(204, 0, 0))     # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                    item.setData(Qt.UserRole, "only_a")
                    item.setToolTip(f"–¢–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ A: {a_value}")
                elif b_value is not None:
                    # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ B - –∑–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
                    item.setText(str(b_value))
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                    if hasattr(self.parent(), 'dark_theme') and self.parent().dark_theme:
                        item.setBackground(QColor(40, 80, 40))    # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                        item.setForeground(QColor(120, 255, 120)) # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                    else:
                        item.setBackground(QColor(238, 255, 238)) # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                        item.setForeground(QColor(0, 136, 0))     # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                    item.setData(Qt.UserRole, "only_b")
                    item.setToolTip(f"–¢–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ B: {b_value}")
                
                self.result_table.setItem(display_idx, col_idx, item)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —è—á–µ–π–∫–∞–º —Å –ø–æ–º–æ—â—å—é –¥–µ–ª–µ–≥–∞—Ç–∞
        self.result_table.setStyleSheet("""
            QTableWidget::item[userRole="different"] { border: 2px solid blue; }
            QTableWidget::item[userRole="only_a"] { border: 2px solid red; }
            QTableWidget::item[userRole="only_b"] { border: 2px solid green; }
        """)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–æ–∫
        for col_idx in range(self.result_table.columnCount()):
            col_name = self.result_table.horizontalHeaderItem(col_idx).text()
            if col_name in column_visibility:
                self.result_table.setColumnHidden(col_idx, not column_visibility[col_name])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–µ–≥–µ–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        for i in reversed(range(self.layout().count())):
            item = self.layout().itemAt(i)
            if isinstance(item, QHBoxLayout) and item.count() > 0 and isinstance(item.itemAt(0).widget(), QLabel) and item.itemAt(0).widget().text() == "–õ–µ–≥–µ–Ω–¥–∞:":
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑ –º–∞–∫–µ—Ç–∞
                while item.count():
                    widget = item.takeAt(0).widget()
                    if widget:
                        widget.deleteLater()
                # –£–¥–∞–ª—è–µ–º —Å–∞–º –º–∞–∫–µ—Ç
                self.layout().removeItem(item)
                break
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–µ–≥–µ–Ω–¥—É
        legend_layout = QHBoxLayout()
        legend_layout.addWidget(QLabel("–õ–µ–≥–µ–Ω–¥–∞:"))
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if hasattr(self.parent(), 'dark_theme') and self.parent().dark_theme:
            red_bg = "#502828"    # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            green_bg = "#285028"  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            blue_bg = "#282850"   # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        else:
            red_bg = "#ffeeee"    # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            green_bg = "#eeffee"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            blue_bg = "#eeeeff"   # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        
        red_box = QLabel()
        red_box.setStyleSheet(f"background-color: {red_bg}; border: 2px solid red; min-width: 20px; min-height: 20px;")
        legend_layout.addWidget(red_box)
        legend_layout.addWidget(QLabel("–ï—Å—Ç—å –≤ A, –Ω–µ—Ç –≤ B"))
        
        green_box = QLabel()
        green_box.setStyleSheet(f"background-color: {green_bg}; border: 2px solid green; min-width: 20px; min-height: 20px;")
        legend_layout.addWidget(green_box)
        legend_layout.addWidget(QLabel("–ï—Å—Ç—å –≤ B, –Ω–µ—Ç –≤ A"))
        
        blue_box = QLabel()
        blue_box.setStyleSheet(f"background-color: {blue_bg}; border: 2px solid blue; min-width: 20px; min-height: 20px;")
        legend_layout.addWidget(blue_box)
        legend_layout.addWidget(QLabel("–ï—Å—Ç—å –≤ A –∏ B, –Ω–æ –Ω–µ —Ä–∞–≤–Ω—ã"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if self.hide_unchanged_rows:
            hidden_count = len(self.merged_data) - len(rows_to_display)
            if hidden_count > 0:
                legend_layout.addStretch()
                legend_layout.addWidget(QLabel(f"–°–∫—Ä—ã—Ç–æ —Å—Ç—Ä–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {hidden_count}"))
        
        legend_layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.layout().insertLayout(self.layout().count() - 1, legend_layout)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        self.result_table.resizeColumnsToContents()